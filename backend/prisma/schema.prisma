// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  avatar    String?
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  ownedBoards    Board[]       @relation("BoardOwner")
  boardMembers   BoardMember[]
  assignedTasks  Task[]        @relation("TaskAssignee")
  createdTasks   Task[]        @relation("TaskCreator")
  comments       Comment[]
  notifications  Notification[]

  @@map("users")
}

model Board {
  id          String   @id @default(cuid())
  title       String
  description String?
  color       String   @default("#3b82f6")
  isPrivate   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  owner       User          @relation("BoardOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId     String
  members     BoardMember[]
  lists       List[]
  tasks       Task[]

  @@map("boards")
}

model BoardMember {
  id       String    @id @default(cuid())
  role     BoardRole @default(MEMBER)
  joinedAt DateTime  @default(now())

  // Relations
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  String
  board   Board  @relation(fields: [boardId], references: [id], onDelete: Cascade)
  boardId String

  @@unique([userId, boardId])
  @@map("board_members")
}

model List {
  id       String @id @default(cuid())
  title    String
  position Int
  color    String @default("#e5e7eb")

  // Relations
  board   Board  @relation(fields: [boardId], references: [id], onDelete: Cascade)
  boardId String
  tasks   Task[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("lists")
}

model Task {
  id          String     @id @default(cuid())
  title       String
  description String?
  position    Int
  priority    Priority   @default(MEDIUM)
  status      TaskStatus @default(TODO)
  dueDate     DateTime?
  completedAt DateTime?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Relations
  board     Board     @relation(fields: [boardId], references: [id], onDelete: Cascade)
  boardId   String
  list      List      @relation(fields: [listId], references: [id], onDelete: Cascade)
  listId    String
  assignee  User?     @relation("TaskAssignee", fields: [assigneeId], references: [id])
  assigneeId String?
  creator   User      @relation("TaskCreator", fields: [creatorId], references: [id])
  creatorId String
  labels    Label[]
  comments  Comment[]
  attachments Attachment[]

  @@map("tasks")
}

model Label {
  id    String @id @default(cuid())
  name  String
  color String

  // Relations
  tasks Task[]

  createdAt DateTime @default(now())

  @@map("labels")
}

model Comment {
  id      String @id @default(cuid())
  content String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  task   Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId String
  author User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId String

  @@map("comments")
}

model Attachment {
  id       String @id @default(cuid())
  filename String
  originalName String
  mimeType String
  size     Int
  url      String
  createdAt DateTime @default(now())

  // Relations
  task   Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId String

  @@map("attachments")
}

model Notification {
  id      String           @id @default(cuid())
  type    NotificationType
  title   String
  message String
  read    Boolean          @default(false)
  data    Json?
  createdAt DateTime       @default(now())

  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  @@map("notifications")
}

// Enums
enum BoardRole {
  OWNER
  ADMIN
  MEMBER
  VIEWER
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  REVIEW
  DONE
}

enum NotificationType {
  TASK_ASSIGNED
  TASK_COMPLETED
  BOARD_INVITATION
  COMMENT_ADDED
  DUE_DATE_REMINDER
}
